on:
  push: {}
  pull_request: {}
  release:
    types:
      - created
jobs:
  build_windows_dcrt:
    name: Build for Windows (Dynamic CRT)
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v1
      - name: Build Debug
        shell: cmd
        env:
          AUDIENCE_STATIC_RUNTIME: 'OFF'
          AUDIENCE_INSTALL_RUNTIME: 'ON'
        run: |
          .\build.bat Debug || goto :error
          goto :EOF
          :error
          exit /b %errorlevel%
      - name: Build Release
        shell: cmd
        env:
          AUDIENCE_STATIC_RUNTIME: 'OFF'
          AUDIENCE_INSTALL_RUNTIME: 'ON'
        run: |
          .\build.bat Release || goto :error
          goto :EOF
          :error
          exit /b %errorlevel%
      - name: Build RelWithDebInfo
        shell: cmd
        env:
          AUDIENCE_STATIC_RUNTIME: 'OFF'
          AUDIENCE_INSTALL_RUNTIME: 'ON'
        run: |
          .\build.bat RelWithDebInfo || goto :error
          goto :EOF
          :error
          exit /b %errorlevel%
      - name: Build MinSizeRel
        shell: cmd
        env:
          AUDIENCE_STATIC_RUNTIME: 'OFF'
          AUDIENCE_INSTALL_RUNTIME: 'ON'
        run: |
          .\build.bat MinSizeRel || goto :error
          goto :EOF
          :error
          exit /b %errorlevel%
      - name: Prepare Runtimes
        shell: cmd
        env:
          AUDIENCE_STATIC_RUNTIME: 'OFF'
          AUDIENCE_INSTALL_RUNTIME: 'ON'
        run: |
          .\dist.bat || goto :error
          goto :EOF
          :error
          exit /b %errorlevel%
      - name: Pack
        shell: cmd
        run: |
          mkdir .\dist\packed || goto :error
          7z a .\dist\packed\audience-windows-dcrt-x64-debug.zip .\dist\Debug\* || goto :error
          7z a .\dist\packed\audience-windows-dcrt-x64-release.zip .\dist\Release\* || goto :error
          7z a .\dist\packed\audience-windows-dcrt-x64-release-debinfo.zip .\dist\RelWithDebInfo\* || goto :error
          7z a .\dist\packed\audience-windows-dcrt-x64-release-minsize.zip .\dist\MinSizeRel\* || goto :error
          7z a .\dist\packed\audience-windows-dcrt-x64-runtime-cli.zip .\dist\runtime-cli\* || goto :error
          7z a .\dist\packed\audience-windows-dcrt-x64-runtime-dynamic.zip .\dist\runtime-dynamic\* || goto :error
          7z a .\dist\packed\audience-windows-dcrt-x64-runtime-static.zip .\dist\runtime-static\* || goto :error
          goto :EOF
          :error
          exit /b %errorlevel%
      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          name: audience-windows-dcrt-x64
          path: dist/packed
  build_windows_scrt:
    name: Build for Windows (Static CRT)
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v1
      - name: Build Debug
        shell: cmd
        env:
          AUDIENCE_STATIC_RUNTIME: 'ON'
          AUDIENCE_INSTALL_RUNTIME: 'OFF'
        run: |
          .\build.bat Debug || goto :error
          goto :EOF
          :error
          exit /b %errorlevel%
      - name: Build Release
        shell: cmd
        env:
          AUDIENCE_STATIC_RUNTIME: 'ON'
          AUDIENCE_INSTALL_RUNTIME: 'OFF'
        run: |
          .\build.bat Release || goto :error
          goto :EOF
          :error
          exit /b %errorlevel%
      - name: Build RelWithDebInfo
        shell: cmd
        env:
          AUDIENCE_STATIC_RUNTIME: 'ON'
          AUDIENCE_INSTALL_RUNTIME: 'OFF'
        run: |
          .\build.bat RelWithDebInfo || goto :error
          goto :EOF
          :error
          exit /b %errorlevel%
      - name: Build MinSizeRel
        shell: cmd
        env:
          AUDIENCE_STATIC_RUNTIME: 'ON'
          AUDIENCE_INSTALL_RUNTIME: 'OFF'
        run: |
          .\build.bat MinSizeRel || goto :error
          goto :EOF
          :error
          exit /b %errorlevel%
      - name: Prepare Runtimes
        shell: cmd
        env:
          AUDIENCE_STATIC_RUNTIME: 'ON'
          AUDIENCE_INSTALL_RUNTIME: 'OFF'
        run: |
          .\dist.bat || goto :error
          goto :EOF
          :error
          exit /b %errorlevel%
      - name: Pack
        shell: cmd
        run: |
          mkdir .\dist\packed || goto :error
          7z a .\dist\packed\audience-windows-scrt-x64-debug.zip .\dist\Debug\* || goto :error
          7z a .\dist\packed\audience-windows-scrt-x64-release.zip .\dist\Release\* || goto :error
          7z a .\dist\packed\audience-windows-scrt-x64-release-debinfo.zip .\dist\RelWithDebInfo\* || goto :error
          7z a .\dist\packed\audience-windows-scrt-x64-release-minsize.zip .\dist\MinSizeRel\* || goto :error
          7z a .\dist\packed\audience-windows-scrt-x64-runtime-cli.zip .\dist\runtime-cli\* || goto :error
          7z a .\dist\packed\audience-windows-scrt-x64-runtime-dynamic.zip .\dist\runtime-dynamic\* || goto :error
          7z a .\dist\packed\audience-windows-scrt-x64-runtime-static.zip .\dist\runtime-static\* || goto :error
          goto :EOF
          :error
          exit /b %errorlevel%
      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          name: audience-windows-scrt-x64
          path: dist/packed
  build_linux:
    name: Build for Linux
    runs-on: ubuntu-18.04
    steps:
      - name: Install Software
        shell: bash
        working-directory: /tmp
        run: |
          set -e
          # kill old cmake
          sudo rm $(which cmake)
          # install new cmake
          wget https://github.com/Kitware/CMake/releases/download/v3.15.4/cmake-3.15.4-Linux-x86_64.sh
          sudo sh cmake-3.15.4-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir --skip-license
          cmake --version
          # install patchelf
          wget http://mirrors.kernel.org/ubuntu/pool/universe/p/patchelf/patchelf_0.9+52.20180509-1_amd64.deb
          sudo dpkg -i patchelf_0.9+52.20180509-1_amd64.deb
          # install dependencies
          sudo apt-get update
          sudo apt-get install libgtk-3-dev libwebkit2gtk-4.0-dev
      - uses: actions/checkout@v1
      - name: Build Debug
        shell: bash
        run: |
          set -e
          ./build.sh Debug
      - name: Build Release
        shell: bash
        run: |
          set -e
          ./build.sh Release
      - name: Build RelWithDebInfo
        shell: bash
        run: |
          set -e
          ./build.sh RelWithDebInfo
      - name: Build MinSizeRel
        shell: bash
        run: |
          set -e
          ./build.sh MinSizeRel
      - name: Prepare Runtimes
        shell: bash
        run: |
          set -e
          ./dist.sh
      - name: Pack
        shell: bash
        run: |
          set -e
          mkdir ./dist/packed
          tar -czf $PWD/dist/packed/audience-linux-x64-debug.tar.gz -C ./dist/Debug .
          tar -czf $PWD/dist/packed/audience-linux-x64-release.tar.gz -C ./dist/Release .
          tar -czf $PWD/dist/packed/audience-linux-x64-release-debinfo.tar.gz -C ./dist/RelWithDebInfo .
          tar -czf $PWD/dist/packed/audience-linux-x64-release-minsize.tar.gz -C ./dist/MinSizeRel .
          tar -czf $PWD/dist/packed/audience-linux-x64-runtime-cli.tar.gz -C ./dist/runtime-cli .
          tar -czf $PWD/dist/packed/audience-linux-x64-runtime-dynamic.tar.gz -C ./dist/runtime-dynamic .
          tar -czf $PWD/dist/packed/audience-linux-x64-runtime-static.tar.gz -C ./dist/runtime-static .
      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          name: audience-linux-x64
          path: dist/packed
  build_macos:
    name: Build for macOS
    runs-on: macOS-10.14
    steps:
      - uses: actions/checkout@v1
      - name: Build Debug
        shell: bash
        run: |
          set -e
          ./build.sh Debug
      - name: Build Release
        shell: bash
        run: |
          set -e
          ./build.sh Release
      - name: Build RelWithDebInfo
        shell: bash
        run: |
          set -e
          ./build.sh RelWithDebInfo
      - name: Build MinSizeRel
        shell: bash
        run: |
          set -e
          ./build.sh MinSizeRel
      - name: Prepare Runtimes
        shell: bash
        run: |
          set -e
          ./dist.sh
      - name: Pack
        shell: bash
        run: |
          set -e
          mkdir ./dist/packed
          tar -czf $PWD/dist/packed/audience-macos-x64-debug.tar.gz -C ./dist/Debug .
          tar -czf $PWD/dist/packed/audience-macos-x64-release.tar.gz -C ./dist/Release .
          tar -czf $PWD/dist/packed/audience-macos-x64-release-debinfo.tar.gz -C ./dist/RelWithDebInfo .
          tar -czf $PWD/dist/packed/audience-macos-x64-release-minsize.tar.gz -C ./dist/MinSizeRel .
          tar -czf $PWD/dist/packed/audience-macos-x64-runtime-cli.tar.gz -C ./dist/runtime-cli .
          tar -czf $PWD/dist/packed/audience-macos-x64-runtime-dynamic.tar.gz -C ./dist/runtime-dynamic .
          tar -czf $PWD/dist/packed/audience-macos-x64-runtime-static.tar.gz -C ./dist/runtime-static .
      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          name: audience-macos-x64
          path: dist/packed
  release_upload:
    name: Upload to Release
    needs:
      - build_windows_dcrt
      - build_windows_scrt
      - build_linux
      - build_macos
    runs-on: ubuntu-18.04
    steps:
      - name: Fetch Windows Build (Dynamic CRT)
        uses: actions/download-artifact@v1
        with:
          name: audience-windows-dcrt-x64
      - name: Fetch Windows Build (Static CRT)
        uses: actions/download-artifact@v1
        with:
          name: audience-windows-scrt-x64
      - name: Fetch Linux Build
        uses: actions/download-artifact@v1
        with:
          name: audience-linux-x64
      - name: Fetch macOS Build
        uses: actions/download-artifact@v1
        with:
          name: audience-macos-x64
      - name: Upload Files
        if: github.event_name == 'release' && github.event.action == 'created'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ github.event.release.id }}
          RELEASE_TAG_NAME: ${{ github.event.release.tag_name }}
        run: |
          set -e
          # upload distribution files
          for dist_os in windows-dcrt windows-scrt linux macos
          do
            dist_suffix="tar.gz"
            dist_mimetype="application/gzip"
            if [[ $dist_os == windows* ]];
            then
              dist_suffix="zip"
              dist_mimetype="application/zip"
            fi
            for dist_config in debug release-minsize runtime-cli runtime-dynamic runtime-static
            do
              curl --silent --fail \
                -H "Authorization: token ${GITHUB_TOKEN}" \
                -H "Content-Type: ${dist_mimetype}" \
                --data-binary "@audience-${dist_os}-x64/audience-${dist_os}-x64-${dist_config}.${dist_suffix}" \
                "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID}/assets?name=audience-${RELEASE_TAG_NAME}-${dist_os}-x64-${dist_config}.${dist_suffix}"
            done
          done
